@page
@model Web.Pages.GenreModel


<script>

    // if for create button change to edit button
    

    document.addEventListener('alpine:init', () => {
        Alpine.data('genres', () => ({
            genres: [],

            pageSize: 10,
            total: 0,
            
            _currentPage: @Model.PageNumber,

            get totalPages() {
                return Math.ceil(this.total / this.pageSize);
            },

            get currentPage() {
                return this._currentPage;
            },

            set currentPage(value) {
                this._currentPage = value;
                window.history.replaceState(null, '', `?page=${value}`);
                this.fetchGenres();
            },



            init() {
                this.auth = Alpine.store('auth');
                this.client = this.auth.http;
                this.fetchGenres();
            },

            async fetchGenres() {
                this.loading = true;
                await this.getCount();

                let url = new URL('/API/OData/Genres/', window.location.origin);

                url.searchParams.set('$top', this.pageSize.toString());
                url.searchParams.set('$skip', ((this.currentPage - 1) * this.pageSize).toString());

                let genres = await this.client.get(url)
                    .then(response => response.data.value) // random delay from 500ms to 3000ms
                    .catch(error => {
                        console.error(error);
                        return [];
                    });

                await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 750) + 100));

                this.genres = genres;
                this.loading = false;
            },


            async getCount() {
                let url = new URL('/API/OData/Genres/$count', window.location.origin);
                this.total = await this.client.get(url)
                    .then(response => parseInt(response.data) || 0)
                    .catch(error => {
                        console.error('Error while getting $count', error);
                        return 0;
                    });
                return this.total;
            },
            
            name: '',
            description: '',
            create: true,
            currentId: 0,

            formLoading: false,

            nameError: '',
            descriptionError: '',

            errorMessage: '',

            editGenre(id) {
                console.log(id);
                this.create = false;
                this.formLoading = true;
                this.currentId = id;
                this.getGenreDetail(id);
                this.$refs.formModal.showModal();
            },

            getGenreDetail(id) {
                this.client.get(`/API/OData/Genres(${id})`)
                    .then(response => {
                        this.name = response.data.Name;
                        this.description = response.data.Description;
                        this.formLoading = false;
                    })
                    .catch(error => this.handleError(error));
            },

            updateGenre(id) {
                this.currentId = id;
            },


            confirmDelete(id) {
                if (confirm('Are you sure you want to delete this genre?')) {
                    this.deleteGenre(id);
                }
            },


            deleteGenre(id) {
                this.loading = true;
                this.client.delete(`/API/Genres/${id}`)
                    .then(response => {
                        this.fetchGenres();
                    })
                    .catch(error => this.handleError(error));
            },

            resetErrorMessages() {
                this.nameError = '';
                this.descriptionError = '';
                this.errorMessage = '';
            },

            handleError(error) {
                if (!error.response) return;
                // Reset the error messages
                this.resetErrorMessages();
                let response = error.response;
                console.log(response);
                let data = response.data;
                switch (response.status) {
                    case 400:
                        this.nameError = data.errors.Name ? data.errors.Name[0] : '';
                        this.descriptionError = data.errors.Description ? data.errors.Description[0] : '';
                        break;
                    default:
                        this.name = '';
                        this.description = '';
                        this.errorMessage = data.message || '';
                        break;
                }
                this.loading = false;
            },

            handleSuccess(response) {
                let responseObject = response.data;
                this.loading = false;

                this.name = '';
                this.description = '';
                this.fetchGenres();
            },

            submit() {
                this.loading = true;

                if (this.create) {
                    this.submitCreate();
                } else {
                    this.submitUpdate(this.currentId);
                    this.create = true;
                    this.currentId = 0;
                    this.name = '';
                    this.description = '';
                }
                this.$refs.formModal.close();
            },

            submitCreate() {
                this.loading = true;
                let data = {
                    name: this.name,
                    description: this.description
                };

                this.client.post('/API/Genres', data)
                    .then(response => this.handleSuccess(response))
                    .catch(error => this.handleError(error));
            },


            submitUpdate(id) {
                this.loading = true;

                let data = {
                    name: this.name,
                    description: this.description
                };

                this.client.put(`/API/Genres/${id}`, data)
                    .then(response => this.handleSuccess(response))
                    .catch(error => this.handleError(error));
            },
        }));
    });



</script>

<div class="contents" x-data="genres" x-on:genre-updated.window="fetchGenres()">
    <div class="container mx-auto py-8 mb-8">
        <!-- Genre Creation Form -->
        <dialog x-ref="formModal" class="modal">
            <div class="modal-box">
                <form
                      x-on:submit.prevent="submit()"
                      x-ref="form">
                    <h2 class="text-2xl font-bold flex items-center justify-center mb-3">
                        <i :data-feather="create ? 'plus-square' : 'edit'" class="mr-2"></i>
                        <span x-text="create ? 'Create Genre' : 'Edit Genre'"></span>
                    </h2>

                    <div class="mb-4">
                        <label for="genre" class="block text-sm font-bold mb-2">Genre Name</label>
                        <input id="genre" type="text" x-model="name" placeholder="Enter the genre name" required
                               class="input input-bordered w-full" autocomplete="off" :class="{ 'input-error': !!nameError }"/>
                        <span class="text-xs text-red-500" x-show="!!nameError" x-text="nameError"></span>
                    </div>

                    <div class="mb-4">
                        <label for="description" class="block text-sm font-bold mb-2">Description</label>
                        <textarea class="textarea textarea-bordered w-full max-h-[200px] min-h-[50px]" 
                        id="description" x-model="description" placeholder="Write description here"
                        rows="2" 
                        maxlength="500" :class="{ 'textarea-error': !!descriptionError }"></textarea>
                        <span class=" text-xs text-red-500" x-show="!!descriptionError" x-text="descriptionError"></span>
                    </div>
                    <div class="modal-action">
                        <button :disabled="loading" class="btn btn-accent"
                                type="submit">
                            <span class="loading loading-infinity" x-show="loading"></span>
                            <span x-text="create ? (loading ? 'Creating...' : 'Create') : (loading ? 'Editing...' : 'Edit')">Save</span>
                        </button>
                        <button x-show="create" class="btn btn-outline ms-2"
                                type="reset"
                                x-on:click="$refs.formModal.close()">
                            Cancel
                        </button>
                        <button x-show="!create" class="btn btn-outline ms-2"
                                type="reset"
                                x-on:click="create = true; currentId = 0; name = ''; description = ''; $refs.formModal.close()">
                            Cancel
                        </button>
                    </div>
                </form>
                <form method="dialog" class="modal-backdrop">
                    <button>close</button>
                </form>
            </div>
        </dialog>

    </div>
    
    <div class="flex justify-between items-center mb-8">
        <h2 class="text-2xl font-bold mb-4">List of Genres</h2>
        <button class="btn btn-success" x-on:click="$refs.formModal.showModal()">
            <i data-feather="plus-square" class="mr-2"></i>
            <span>Create New Genre</span>
        </button>
    </div>
    <div class="w-full mt-8">
        <table class="table w-full rounded-box" aria-describedby="genres_info">
            <thead>
            <tr>
                <th class=" font-semibold p-4 relative pr-6">#</th>
                <th class=" font-semibold p-4 relative pr-6 ">Genre</th>
                <th class=" font-semibold p-4 relative pr-6">Description</th>
                <th class=" font-semibold p-4 relative pr-6">Actions</th>
            </tr>
            </thead>
            <tbody>
            <tr x-show="loading">
                <td colspan="4" class="text-center">
                    <span class="loading loading-lg loading-infinity"></span>
                <td>
            </tr>
            <template x-for="genre in genres">
                <tr class="bg-base-100 hover" x-show="!loading"
                    x-transition:enter="transition ease-out duration-300"
                    x-transition:enter-start="opacity-0"
                    x-transition:enter-end="opacity-100"
                    >
                    <td>
                        <span class="text-sm" x-text="'#' + genre.Id">
                            Id
                        </span>
                    </td>
                    <td>
                        <span class="badge badge-outline badge-outline-success" x-text="genre.Name">
                            Genre
                        </span>
                    </td>
                    <td>
                        <span class="text-sm" x-text="genre.Description">
                            Description
                        </span>
                    </td>
                    <td>
                        <a class="btn btn-xs btn-warning gap-2" x-on:click="editGenre(genre.Id)">
                            <i data-feather="edit"></i>
                            <span class="text-sm">Edit</span>
                        </a>
                        <a class="btn btn-xs btn-error gap-2" x-on:click="confirmDelete(genre.Id)">
                            <i data-feather="trash"></i>
                            <span class="text-sm">Delete</span>
                        </a>
                    </td>
                </tr>
            </template>
            </tbody>
        </table>
        <div class="w-full mt-4 flex justify-end">
            <div class="join">
                <button class="join-item btn"
                        :disabled="currentPage <= 1"
                        x-on:click="currentPage = 1">
                    «
                </button>
                <button class="join-item btn"
                        :disabled="currentPage <= 1"
                        x-on:click="currentPage--">
                    ‹
                </button>
                <select class="join-item select select-bordered"
                        x-model.debounce="currentPage"
                        x-data="{ selected: currentPage }">
                    <template x-for="i in totalPages" :key="i">
                        <option x-text="`Page ${i}`" :value="i" :selected="i === selected"></option>
                    </template>
                </select>

                <button class="join-item btn"
                        :disabled="currentPage >= totalPages"
                        x-on:click="currentPage++">
                    ›
                </button>
                <button class="join-item btn"
                        :disabled="currentPage >= totalPages"
                        x-on:click="currentPage = totalPages">
                    »
                </button>
            </div>
        </div>
    </div>
</div>