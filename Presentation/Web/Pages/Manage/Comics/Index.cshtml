@page
@model Web.Pages.Manage.Comic.IndexModel

<script>

    // if for create button change to edit button


    document.addEventListener('alpine:init', () => {
        Alpine.data('comics', () => ({
            comics: [],

            pageSize: 10,
            total: 0,

            _currentPage: @Model.PageNumber,

            get totalPages() {
                return Math.ceil(this.total / this.pageSize);
            },

            get currentPage() {
                return this._currentPage;
            },


            set currentPage(value) {
                this._currentPage = value;
                window.history.replaceState(null, '', `?page=${value}`);
                this.fetchComics();
            },


            init() {
                this.auth = Alpine.store('auth');
                this.client = this.auth.http;
                this.fetchComics();
            },

            async fetchComics() {
                this.loading = true;
                await this.getCount();

                let url = new URL('/API/OData/Comics/', window.location.origin);

                url.searchParams.set('$top', this.pageSize.toString());
                url.searchParams.set('$skip', ((this.currentPage - 1) * this.pageSize).toString());

                let comics = await this.client.get(url)
                    .then(response => response.data.value) // random delay from 500ms to 3000ms
                    .catch(error => {
                        console.error(error);
                        return [];
                    });

                await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 750) + 100));

                this.comics = comics;
                this.loading = false;
            },


            async getCount() {
                let url = new URL('/API/OData/Comics/$count', window.location.origin);
                this.total = await this.client.get(url)
                    .then(response => parseInt(response.data) || 0)
                    .catch(error => {
                        console.error('Error while getting $count', error);
                        return 0;
                    });
                return this.total;
            },

            name: '',
            description: '',
            create: true,
            currentId: 0,

            formLoading: false,

            nameError: '',
            descriptionError: '',

            errorMessage: '',

      

            getGenreDetail(id) {
                this.client.get(`/API/OData/Comics(${id})`)
                    .then(response => {
                        this.name = response.data.Name;
                        this.description = response.data.Description;
                        this.formLoading = false;
                    })
                    .catch(error => this.handleError(error));
            },

   

            confirmDelete(id) {
                if (confirm('Are you sure you want to delete this genre?')) {
                    this.deleteGenre(id);
                }
            },


            deleteGenre(id) {
                this.loading = true;
                this.client.delete(`/API/Comics/${id}`)
                    .then(response => {
                        this.fetchGenres();
                    })
                    .catch(error => this.handleError(error));
            },

            resetErrorMessages() {
                this.nameError = '';
                this.descriptionError = '';
                this.errorMessage = '';
            },

            handleError(error) {
                if (!error.response) return;
                // Reset the error messages
                this.resetErrorMessages();
                let response = error.response;
                console.log(response);
                let data = response.data;
                switch (response.status) {
                    case 400:
                        this.nameError = data.errors.Name ? data.errors.Name[0] : '';
                        this.descriptionError = data.errors.Description ? data.errors.Description[0] : '';
                        break;
                    default:
                        this.name = '';
                        this.description = '';
                        this.errorMessage = data.message || '';
                        break;
                }
                this.loading = false;
            },

            handleSuccess(response) {
                let responseObject = response.data;
                this.loading = false;

                this.name = '';
                this.description = '';
                this.fetchGenres();
            },

        }));
    });



</script>

<div class="contents" x-data="comics">
    <div class="flex justify-between items-center mb-8">
        <h2 class="text-2xl font-bold mb-4">List of Comcis</h2>
        <a class="btn btn-success" asp-page="/Manage/Comics/Create">
            <i data-feather="plus-square" class="mr-2"></i>
            <span>Create New Comic</span>
        </a>
    </div>
    <div class="w-full mt-8">
        <table class="table w-full max-w-full rounded-box" aria-describedby="comics_info" :class="{ 'min-h-[538px]': loading }">
            <thead>
                <tr>
                    <th class=" font-semibold p-4 relative pr-6">#</th>
                    <th class=" font-semibold p-4 relative pr-6 ">Comic</th>
                    <th class=" font-semibold p-4 relative pr-6">Authors</th>
                    <th class=" font-semibold p-4 relative pr-6">Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr x-show="loading">
                    <td colspan="4" class="text-center">
                        <span class="loading loading-lg loading-infinity"></span>
                    <td>
                </tr>
                <template x-for="comic in comics">
                    <tr class="bg-base-100 hover" x-show="!loading"
                        x-transition:enter="transition ease-out duration-300"
                        x-transition:enter-start="opacity-0"
                        x-transition:enter-end="opacity-100">
                        <td>
                            <span class="text-sm" x-text="'#' + comic.Id">
                                Id
                            </span>
                        </td>
                        <td>
                            <a asp-page="/Comic/Details" asp-route-id="-1" :href="$el.href.replace('-1', comic.Id)"
                               class="card card-side">
                                <figure class="max-w-[80px] max-h-[120px]">
                                    <img class="w-[80px] h-full object-cover object-center" :src="comic?.Cover" src="" alt="Cover" />
                                </figure>
                                <div class="card-body">
                                    <p class="text-sm card-title" x-text="comic?.Name">Name</p>
                                    <p class="text-sm font-normal leading-relaxed" x-text="comic?.Aliases">
                                        Aliases
                                    </p>
                                </div>
                            </a>
                        </td>
                        <td>
                            <span x-text="comic.Authors">
                                Authors
                            </span>
                        </td>
                        <td>
                            <a class="btn btn-xs btn-warning gap-2" asp-page="/Manage/Comics/Edit">
                                <i data-feather="edit"></i>
                                <span class="text-sm">Edit</span>
                            </a>
                            <a class="btn btn-xs btn-error gap-2" x-on:click="confirmDelete(genre.Id)">
                                <i data-feather="trash"></i>
                                <span class="text-sm">Delete</span>
                            </a>
                        </td>
                    </tr>
                </template>
            </tbody>
        </table>
        <div class="w-full mt-4 flex justify-end">
            <div class="join">
                <button class="join-item btn"
                        :disabled="currentPage <= 1"
                        x-on:click="currentPage = 1">
                    «
                </button>
                <button class="join-item btn"
                        :disabled="currentPage <= 1"
                        x-on:click="currentPage--">
                    ‹
                </button>
                <select class="join-item select select-bordered"
                        x-model.debounce="currentPage"
                        x-data="{ selected: currentPage }">
                    <template x-for="i in totalPages" :key="i">
                        <option x-text="`Page ${i}`" :value="i" :selected="i === selected"></option>
                    </template>
                </select>

                <button class="join-item btn"
                        :disabled="currentPage >= totalPages"
                        x-on:click="currentPage++">
                    ›
                </button>
                <button class="join-item btn"
                        :disabled="currentPage >= totalPages"
                        x-on:click="currentPage = totalPages">
                    »
                </button>
            </div>
        </div>
    </div>
</div>