@page
@model Web.Pages.GenreModel


<script>
    // Genre Creation Form Alpine Component
    document.addEventListener('alpine:init', () => {
        Alpine.data('addGenreForm', () => ({
            name: '',
            description: '',

            loading: false,

            nameError: '',
            descriptionError: '',

            errorMessage: '',



            init() {
                this.auth = Alpine.store('auth');
                this.client = this.auth.http;
            },

            resetErrorMessages() {
                this.nameError = '';
                this.descriptionError = '';
                this.errorMessage = '';
            },

            handleError(error) {
                if (!error.response) return;
                // Reset the error messages
                this.resetErrorMessages();
                let response = error.response;
                console.log(response);
                let data = response.data;
                switch (response.status) {
                    case 400:
                        this.nameError = data.errors.Name ? data.errors.Name[0] : '';
                        this.descriptionError = data.errors.Description ? data.errors.Description[0] : '';
                        break;
                    default:
                        this.name = '';
                        this.description = '';
                        this.errorMessage = data.message || '';
                        break;
                }
                this.loading = false;
            },

            handleSuccess(response) {
                let responseObject = response.data;
                this.loading = false;

                this.name = '';
                this.description = '';
                this.showPopupSuccess();

            },

            submit() {
                console.log(this.genres);
                this.loading = true;
                let data = {
                    name: this.name,
                    description: this.description
                };

                this.client.post('/API/Genres', data)
                    .then(response => this.handleSuccess(response))
                    .catch(error => this.handleError(error));


            },

            showPopupSuccess() {
                alert("Genre created successfully!")
            },

            confirmDelete(id) {
                if (confirm('Are you sure you want to delete this genre?')) {
                    this.deleteGenre(id);
                }
            },

            deleteGenre(id) {
                this.loading = true;
                this.client.delete(`/API/Genres(${id})`)
                    .then(response => this.handleSuccess(response))
                    .catch(error => this.handleError(error));
            }


        }));

        Alpine.data('genres', () => ({
            genres: [],

            //for pagination
            currentPage: 1,
            perPage: 5,
            end: 0,
            total: 0,


            init() {
                this.auth = Alpine.store('auth');
                this.client = this.auth.http;
                this.client.get('/API/OData/Genres?$top=' + this.perPage + '&$skip=' + this.end)
                    .then(response => { { this.genres = response.data.value; } })
                    .catch(error => console.error(error))

                this.client.get('/API/OData/Genres/$count')
                    .then(response => { { this.total = response.data; } })
                    .catch(error => console.error(error))



            },




            //logic for pagination
            paginatedData() {
                start: (this.currentPage - 1) * this.perPage;
                end: start + this.perPage;
                return this.end;
            },

            // create value for loop pagination
            totalPages() {
                return Math.ceil(this.total / this.perPage);
            },


        }));
    });
</script>

<div class="container mx-auto py-8 mb-8">
    <!-- Genre Creation Form -->
    <form class="w-full max-w-md bg-base-300 p-8 shadow-lg rounded-lg"
          x-data="addGenreForm"
          x-on:submit.prevent="submit()">
        <h2 class="text-2xl font-bold flex items-center justify-center mb-3">Create Genre</h2>

        <div class="mb-4">
            <label for="genre" class="block text-sm font-bold mb-2">Genre Name</label>
            <input id="genre" type="text" x-model="name" placeholder="Enter the genre name" required
                   class="input input-bordered w-full" autocomplete="off" :class="{ 'input-error': !!nameError }" />
            <span class="text-xs text-red-500" x-show="!!nameError" x-text="nameError"></span>
        </div>

        <div class="mb-4">
            <label for="description" class="block text-sm font-bold mb-2">Description</label>
            <textarea id="description" x-model="description" placeholder="Write description here"
                      class="input input-bordered w-full" rows="2"></textarea>
            <span class=" text-xs text-red-500" x-show="!!descriptionError" x-text="descriptionError"></span>
        </div>

        <div class="mb-6">
            <button :disabled="loading" class="btn btn-accent w-full"
                    type="submit">
                <span class="loading loading-infinity" x-show="loading"></span>
                <span x-text="loading ? 'Creating...' : 'Create'">Create</span>
            </button>
        </div>
    </form>
</div>



<h2 class="text-2xl font-bold mb-4">List of Genres</h2>
<div class="w-full mt-8" x-data="genres">
    <table class="table w-full rounded-box" aria-describedby="genres_info">
        <thead>
            <tr>
                <th class=" font-semibold p-4 relative pr-6 ">Genre</th>
                <th class=" font-semibold p-4 relative pr-6">Description</th>
                <th class=" font-semibold p-4 relative pr-6">Actions</th>
            </tr>
        </thead>
        <tbody>
            <template x-for="genre in genres">
                <tr class="bg-base-100">
                    <td>
                        <span class="text-xl">
                            <a x-text="genre.Name">A</a>
                        </span>
                    </td>
                    <td>
                        <span x-text="genre.Description">A</span>
                    </td>
                    <td>
                        <a class="btn btn-sm btn-warning gap-2" href="/genre/292319975337779200/edit">
                            <i data-feather="edit"></i>
                            <span class="text-sm">Edit</span>
                        </a>
                        <a class="btn btn-sm btn-error gap-2" href="/genre/292319975337779200/delete">
                            <i data-feather="trash"></i>
                            <span class="text-sm">Delete</span>
                        </a>
                    </td>
                </tr>
            </template>
        </tbody>
        <tfoot>
            <div class="join">
                <template x-for="i in Math.min(totalPages(), 2)">
                    <button class="join-item btn" x-text="i"></button>
                </template>
                <template x-if="totalPages() > 4">
                    <button class="join-item btn" x-text="'...'"></button>
                </template>
                <template x-for="i in Math.max(totalPages()-2,3)">
                    <button class="join-item btn" x-text="i+2"></button>
                </template>

            </div>
        </tfoot>
    </table>
</div>

