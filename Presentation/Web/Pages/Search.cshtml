@page
@model SearchModel
@{
    ViewData["Title"] = "Home page";
}
@await Html.PartialAsync("_PaginationScriptPartial", Model.Pagination)
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('comics', () => ({
            loading: true,
            auth: null,
            client: null,
            pagination: { current: 0, size: 0, total: 0, count: 0 },
            comics: [],
            genres: [],
            search: {
                query: '@Model.Query',
                genres: '@Model.Genres', 
                genresMatrix: {},
                authors: '@Model.Authors',  
            },
            
            updateParam(key, value) {
                let url = new URL(window.location.href);
                let search = url.searchParams;
                if (value) search.set(key, value);
                else search.delete(key);
                window.history.replaceState(null, '', url);
            },
            
            async init() {
                this.auth = Alpine.store('auth');
                this.client = this.auth.http;
                this.pagination = Alpine.store('pagination');
                this.$watch('pagination.current', async () => await this.load());
                this.$watch('pagination.size', async () => await this.load());
                this.$watch('search.query', async () => {
                    this.updateParam('query', this.search.query);
                    await this.load();
                });
                this.$watch('search.genres', async () => {
                    this.updateParam('genres', this.search.genres);
                    await this.load();
                });
                this.$watch('search.authors', async () => {
                    this.updateParam('authors', this.search.authors);
                    await this.load();
                });
                for (let genre of this.search.genres.split(',')) {
                    if (!genre) continue;
                    let id = genre.charAt(0) === '-' ? genre.substring(1) : genre;
                    this.search.genresMatrix[id] = genre.charAt(0) === '-' ? 2 : 1;
                }   
                this.$watch('search.genresMatrix', async () => {
                    let genresQuery = this.search.genres;
                    for (let [id, state] of Object.entries(this.search.genresMatrix)) {
                        if (genresQuery.includes(id)) {
                            genresQuery = genresQuery.replaceAll(new RegExp(`-?${id},?`, 'g'), '');
                        }
                        if (state === 1) {
                            genresQuery += `${id},`;
                        } else if (state === 2) {
                            genresQuery += `-${id},`;
                        }
                    }
                    genresQuery = genresQuery.substring(0, genresQuery.length - 1);
                    this.search.genres = genresQuery;
                });
                await this.load();
                await this.fetchGenres();
            },
            
            async load() {
                this.loading = true;
                this.pagination.count = await this.getCount();
                await this.fetchComics();
                this.loading = false;
            },
            
            addGenre(id, state) {
                this.search.genresMatrix[id] = state;
            },
                        
            
            buildUrl(url) {
                url.searchParams.set('$expand', 'ComicGenres($expand=Genre)');
                url.searchParams.set('$orderby', 'Id desc');
                url.searchParams.addODataPagination(this.pagination.current, this.pagination.size);
                let filter = '';
                if (this.search.query) {
                    if (filter) filter += ' and ';
                    filter += `contains(tolower(Name), tolower('${this.search.query}'))`;
                    filter += ` or contains(tolower(Aliases), tolower('${this.search.query}'))`;
                }
                
                if (this.search.genres) {
                    let genres = this.search.genres.split(',');
                    for (let genre of genres) {
                        if (!genre) continue;
                        if (filter) filter += ' and ';
                        if (genre.charAt(0) === '-') {
                            genre = genre.substring(1);
                            filter += `not ComicGenres/any(c: c/Genre/Id eq '${genre}')`;
                        } else {
                            filter += `ComicGenres/any(c: c/Genre/Id eq '${genre}')`;
                        }
                    }
                }
                
                if (this.search.authors) {
                    if (filter) filter += ' and ';
                    filter += `contains(tolower(Authors), tolower('${this.search.authors}'))`;
                }
                
                if (filter) {
                    url.searchParams.set('$filter', filter);
                }
                return url;
                
            },
            
            async fetchComics() {                
                let url = new URL('/API/OData/Comics/', window.location.origin);
                
                this.buildUrl(url);
                
                let comics = await this.client.get(url)
                    .then(response => response.data?.value || []) // random delay from 500ms to 3000ms
                    .catch(error => {
                        console.error(error);
                        return [];
                    }).then(comics => camelize(comics));
                
                await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 750) + 100));
                
                this.comics = comics;
                return comics;
            },
            
            async fetchGenres() {
                let url = new URL('/API/OData/Genres/', window.location.origin);
                url.searchParams.set('$orderby', 'Name');
                let genres = await this.client.get(url)
                    .then(response => response.data?.value || [])
                    .catch(error => {
                        console.error(error);
                        return [];
                    }).then(genres => camelize(genres));
                this.genres = genres;
                return genres;
            
            },
            
            async getCount() {
                let url = new URL('/API/OData/Comics/$count', window.location.origin);
                this.buildUrl(url);
                return await this.client.get(url)
                    .then(response => parseInt(response.data) || 0)
                    .catch(error => {
                        console.error('Error while getting $count', error); 
                        return 0;
                    });
            }
        }));
    });
</script>

<div class="contents" x-data="comics" x-on:genre.window="addGenre($event.detail.id, $event.detail.state)">
    <div class="mb-6 w-full">
        <label class="form-control mb-2">
            <div class="label">
                <span class="label-text">Search by Name or Aliases</span>
            </div>
            <input type="text" placeholder="Type comic name here" class="input input-bordered" x-model.debounce="search.query"/>
        </label>
        <label class="form-control mb-2">
            <div class="label">
                <span class="label-text">Search by Authors</span>
            </div>
            <input type="text" placeholder="Type author name here" class="input input-bordered" x-model.debounce="search.authors"/>
        </label>

        <label class="form-control">
            <div class="label">
                <span class="label-text">
                    Filter by Genres
                    <span class="tooltip" data-tip="Green checkmark means include, red cross means exclude">
                        <button class="btn btn-circle btn-xs">
                            <i data-feather="info" class="text-base-content" aria-hidden="true"></i>
                        </button>
                    </span>
                </span>
            </div>
        </label>
        <div class="grid grid-cols-5 gap-2 items-center justify-start mb-2">
            <template x-for="genre in genres" :key="genre.id">
                <div x-on:click="state = (state + 1) % 3" x-data="{ state: 0 }" class="cursor-pointer"
                     x-init="state = search.genresMatrix[genre.id] ?? 0; $watch('state', value => $dispatch('genre', { id: genre.id, state: value }))">
                    <svg :class="colors[state]" class="btn btn-xs btn-square" fill="none" height="16" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="16" x-data="{ colors: ['', 'btn-success', 'btn-error'] }" xmlns="http://www.w3.org/2000/svg">
                        <path :d="d[state]" x-data="{ d: ['', 'M20 6 9 17l-5-5', 'M18 6 6 18M6 6l12 12'] }" d=""></path>
                    </svg>
                    <span x-text="genre.name" class="select-none"></span>
                </div>

            </template>
        </div>
    </div>

    <!--* Not found -->
    <div class="flex justify-center py-10" x-show="!loading && pagination.total === 0">
        <h1 class="text-4xl font-bold text-center">
            <i data-feather="alert-triangle" aria-hidden="true"></i>
            No comics found
        </h1>
    </div>

    <!--* cards -->
    <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-6 md:min-h-[680px] sm:min-h-0">
        <!--* skeleton -->
        <div class="contents" x-show="loading">
            <template x-for="i in pagination.size">
                <div class="mx-auto">
                    <div class="w-[190px] h-[280px] skeleton"></div>
                    <!-- random width from 50% to 100% -->
                    <div class="mt-4 h-3 skeleton"
                         :style="{ width: `${Math.floor(Math.random() * 50) + 50}%` }">
                    </div>
                    <div class="mt-2 h-3 skeleton"
                         :style="{ width: `${Math.floor(Math.random() * 20) + 20}%` }">
                    </div>
                </div>
            </template>
        </div>
        <!--* comics -->
        <div class="contents"
             x-show="!loading"
             x-transition:enter="transition ease-out duration-300 delay-500"
             x-transition:enter-start="opacity-0 scale-90"
             x-transition:enter-end="opacity-100 scale-100">
            <template x-for="comic in comics">
                <a class="mx-auto" :href="$el.href.replace('-1', comic.id)" asp-page="/Comics/Details" asp-route-id="-1">
                    <div class="dropdown dropdown-hover">
                        <div class="w-[190px] h-[280px]">
                            <img alt="new" class="w-[190px] h-[280px] object-cover object-center rounded-box shadow-2xl cursor-pointer"
                                 :src="comic.cover" src="">
                        </div>

                        <div class="dropdown-content z-50">
                            <div class="card w-[230px] bg-base-100 shadow-2xl">
                                <div class="card-body">
                                    <h4 class="card-title text-accent font-bold text-base" x-text="comic?.name">Name</h4>
                                    <p class="text-sm font-normal leading-relaxed"
                                       x-text="comic?.description">
                                        Description
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4">
                            <h3 class="title-font mb-2 tracking-widest text-gray-500 hover:text-cyan-600 font-bold text-base text-center"
                                x-text="comic.name">
                                Name
                            </h3>
                        </div>
                    </div>
                </a>
            </template>
        </div>
    </div>

    <!--* pagination -->
    <div class="w-full mt-4 flex justify-center gap-2">
        @await Html.PartialAsync("_PaginationPartial")
    </div>
</div>