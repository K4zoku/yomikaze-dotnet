@page
@model Yomikaze.Presentation.Web.Models.PaginatedPageModel
@{
    ViewData["Title"] = "Home page";
}

@await Html.PartialAsync("_PaginationScriptPartial", Model.Pagination)
<script>
    document.addEventListener('alpine:init', () => {
        const ODATA_URL = ODATA_BASE_URL + '/Comics';
        
        Alpine.data('comics', () => ({
            loading: true,
            auth: null,
            client: null,
            pagination: { current: 0, size: 0, total: 0, count: 0 },        
                                    
            data: [],
            
            init() {
                this.auth = Alpine.store('auth');
                this.client = this.auth.http;
                this.pagination = Alpine.store('pagination');
                this.$watch('pagination.current', () => this.load());
                this.$watch('pagination.size', () => this.load());
                this.load();
            },
            
            async load() {
                this.loading = true;
                this.pagination.count = await this.fetchCount();
                await this.fetchData();
                this.loading = false;
            },
            
            async fetchData() {                
                let url = new URL(ODATA_URL, window.location.origin);
                url.searchParams.addODataPagination(this.pagination.current, this.pagination.size);
                url.searchParams.set('$expand', 'ComicGenres($expand=Genre)');
                url.searchParams.set('$orderby', 'LastUpdated desc, CreatedAt desc');
                
                let comics = await this.client.get(url)
                    .then(response => response.data.value) // random delay from 500ms to 3000ms
                    .catch(error => {
                        console.error(error);
                        return [];
                    });
                comics = camelize(comics);
                console.log(comics);
                
                await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 750) + 100));
                
                return this.data = comics;
            },
            
            async fetchCount() {
                let url = new URL(ODATA_URL + '/$count');
                this.total = await this.client.get(url)
                    .then(response => parseInt(response.data) || 0)
                    .catch(error => {
                        console.error('Error while getting $count', error); 
                        return 0;
                    });
                return this.total;
            }
        }));
    });
</script>

<div class="contents" x-data="comics">
    <!--* cards -->
    <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-6 md:min-h-[680px] sm:min-h-0">
        <!--* skeleton -->
        <div class="contents" x-show="loading">
            <template x-for="i in pagination.size">
                <div class="mx-auto">
                    <div class="w-[190px] h-[280px] skeleton"></div>
                    <!-- random width from 50% to 100% -->
                    <div class="mt-4 h-3 skeleton"
                         :style="{ width: `${Math.floor(Math.random() * 50) + 50}%` }">
                    </div>
                    <div class="mt-2 h-3 skeleton"
                         :style="{ width: `${Math.floor(Math.random() * 20) + 20}%` }">
                    </div>
                </div>
            </template>
        </div>
        <!--* comics -->
        <div class="contents"
             x-show="!loading"
             x-transition:enter="transition ease-out duration-300 delay-500"
             x-transition:enter-start="opacity-0 scale-90"
             x-transition:enter-end="opacity-100 scale-100">
            <template x-for="comic in data" :key="comic.id">
                <a class="mx-auto h-fit hover:scale-[1.02] duration-300 transition" :href="$el.href.replace('-1', comic.id)" asp-page="/Comics/Details" asp-route-id="-1">
                    <figure class="w-[190px] h-[280px]">
                        <img alt="new" class="w-[190px] h-[280px] object-cover object-center rounded-box shadow-xl cursor-pointer"
                             src=""
                             data-src="/placeholder.png"
                             :src="comic.cover || $el.dataset.src">
                    </figure>
                    <div class="mt-4 max-w-[190px] max-h-24">
                        <div class="tooltip" :data-tip="comic.name">
                            <h3 class="title-font mb-2 font-bold text-base text-ellipsis"
                                x-text="comic.name">
                                Name
                            </h3>
                        </div>
                    </div>
                </a>
            </template>
        </div>
    </div>

    <!--* pagination -->
    <div class="w-full mt-4 flex justify-center gap-2">
        @await Html.PartialAsync("_PaginationPartial")
    </div>
</div>