@page
@model HistoryModel

@await Html.PartialAsync("_PaginationScriptPartial", Model.Pagination)

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('comics', () => ({
            pagination: { current: 0, size: 0, total: 0, count: 0 },
            auth: null,
            client: null,
            
            histories: [],

            loading: false,
              
            async load() {
                this.loading = true;
                this.pagination.count = await this.getCount();
                await this.fetchData();
                this.loading = false;
            },
            
            init() {
                this.auth = Alpine.store('auth');
                if (!this.auth.authenticated) {
                    window.location.href = '/';
                    return;
                }
                this.client = this.auth.http;
                this.pagination = Alpine.store('pagination');
                this.$watch('pagination.current', async () => await this.load());
                this.$watch('pagination.size', async () => await this.load());
                this.load();
            },

            async fetchData() {
                let url = new URL('/API/OData/History', window.location.origin);
                url.searchParams.addODataPagination(this.pagination.current, this.pagination.size);
                url.searchParams.set('$orderby', 'CreatedAt desc');
                url.searchParams.set('$select', 'CreatedAt,Chapter,ChapterId');
                url.searchParams.set('$expand', 'Chapter($expand=Comic($select=Id,Name,Aliases,Cover))');
                let histories = await this.client.get(url)
                    .then(response => response.data.value) // random delay from 500ms to 3000ms
                    .catch(error => {
                        console.error(error);
                        return [];
                    });
                histories = camelize(histories);
                await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 750) + 100));
                return this.histories = histories;
            },


            async getCount() {
                let url = new URL('/API/OData/History/$count', window.location.origin);
                this.total = await this.client.get(url)
                    .then(response => parseInt(response.data) || 0)
                    .catch(error => {
                        console.error('Error while getting $count', error);
                        return 0;
                    });
                return this.total;
            },  
        }));
    });
</script>

<div class="contents" x-data="comics">
    <div class="divider divider-start my-8">
        <h1 class="text-4xl font-bold">History</h1>
    </div>

    <div class="w-full mt-8">
        <table class="table w-full max-w-full rounded-box" aria-describedby="comics_info" :class="{ 'min-h-[538px]': loading }">
            @*  <colgroup> *@
            @*        <col span="1" class="w-[55%]"> *@
            @*        <col span="1" class="w-[25%]"> *@
            @*        <col span="1" class="w-[20%]"> *@
            @* </colgroup> *@
            <thead>
            <tr>
                <th class=" font-semibold p-4 relative pr-6 ">Comic</th>
                <th class=" font-semibold p-4 relative pr-6">Chapter</th>
                <th class=" font-semibold p-4 relative pr-6">Read At</th>
            </tr>
            </thead>
            <tbody>
            <tr x-show="loading">
                <td colspan="4" class="text-center">
                <span class="loading loading-lg loading-infinity"></span>
                <td>
            </tr>
            <template x-for="history in histories">
                <tr class="bg-base-100 hover" x-show="!loading"
                    x-data="{ comic: history.chapter.comic, chapter: history.chapter }"
                    x-transition:enter="transition ease-out duration-300"
                    x-transition:enter-start="opacity-0"
                    x-transition:enter-end="opacity-100">
                    <td>
                        <a asp-page="/Comics/Details" asp-route-id="-1" :href="$el.href.replace('-1', comic.id)"
                           class="card card-side hover:scale-[1.01] transition-transform duration-500">
                            <figure class="max-w-[95px] max-h-[140px]">
                                <img class="w-[95px] h-[140px] object-cover object-center rounded-box shadow-lg"
                                     data-src="/placeholder.png" :src="comic.cover || $el.dataset.src" src="" alt="Cover"/>
                            </figure>
                            <div class="card-body">
                                <p class="text-sm card-title" x-text="comic.name">Name</p>
                                <p class="text-sm font-normal leading-relaxed" x-text="comic.aliases">
                                    Aliases
                                </p>
                            </div>
                        </a>
                    </td>
                    <td>
                        <a class="btn btn-ghost flex gap-2" asp-page="/Comics/Chapter" asp-route-comicId="-1" asp-route-index="-2" :href="$el.href.replace('-1', comic.id).replace('-2', chapter.index)">
                            <span x-text="chapter.title">Chapter</span>
                            <i data-feather="external-link" aria-hidden="true"></i>
                        </a>
                    </td>
                    <td>
                        <div class="tooltip" :data-tip="moment(history.createdAt).format('MMMM Do YYYY, h:mm:ss a')">
                            <span x-text="moment(history.createdAt).fromNow()">Read At</span>
                        </div>
                    </td>
                </tr>
            </template>
            </tbody>
        </table>
        <div class="w-full mt-4 flex justify-end items-center gap-2">
            @await Html.PartialAsync("_PaginationPartial")
        </div>
    </div>
</div>