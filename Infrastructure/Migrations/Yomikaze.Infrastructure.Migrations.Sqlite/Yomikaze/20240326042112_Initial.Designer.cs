// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yomikaze.Infrastructure.Context;

#nullable disable

namespace Yomikaze.Infrastructure.Migrations.Sqlite.Yomikaze
{
    [DbContext(typeof(YomikazeDbContext))]
    [Migration("20240326042112_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Yomikaze.Domain.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Avatar")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("avatar")
                        .HasColumnOrder(3);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("ComicId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(4);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnName("index")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("title")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.ToTable("chapters");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Aliases")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("aliases")
                        .HasColumnOrder(2);

                    b.Property<string>("Banner")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("banner")
                        .HasColumnOrder(5);

                    b.Property<string>("Cover")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("cover")
                        .HasColumnOrder(4);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<DateTimeOffset?>("Ended")
                        .HasColumnType("TEXT")
                        .HasColumnName("ended")
                        .HasColumnOrder(7);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("Published")
                        .HasColumnType("TEXT")
                        .HasColumnName("published")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("comics");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("ChapterId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("chapter_id")
                        .HasColumnOrder(4);

                    b.Property<string>("ComicId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(3);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("content")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("ReplyToId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("reply_to_id")
                        .HasColumnOrder(5);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ComicId");

                    b.HasIndex("ReplyToId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("genres");

                    b.HasData(
                        new
                        {
                            Id = "30868700449996800",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(7431), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that focuses on physical action, such as fighting, war, sports, or physical challenges.",
                            Name = "Action"
                        },
                        new
                        {
                            Id = "30868700449996801",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8052), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Explores exotic locations and tense situations, such as battles, a treasure hunt, or an exploration of the unknown.",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = "30868700449996802",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8059), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story with humorous narration or dialogue, intended to amuse the audience.",
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = "30868700449996803",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8062), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that is neither a comedy nor a tragedy, typically focusing on a conflict between the protagonist and antagonist.",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = "30868700449996804",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8065), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that takes place in a setting that defies the laws of the universe, such as magic or supernatural elements.",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = "30868700449996805",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8067), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that evokes fear in both the characters and the audience.",
                            Name = "Horror"
                        },
                        new
                        {
                            Id = "30868700449996806",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8069), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that revolves around solving a puzzle or a crime.",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = "30868700449996807",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8072), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that emphasizes the psychology of its characters and their unstable emotional states.",
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = "30868700449996808",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8074), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story about love.",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = "30868700449996809",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8076), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that portrays a \"cut-out\" sequence of events in a character's life.",
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = "30868700449996810",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8079), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that revolves around sports, such as baseball or basketball.",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = "30868700449996811",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8081), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that involves supernatural elements, such as ghosts or demons.",
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = "30868700449996812",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8082), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that is fast-paced and suspenseful, often involving a crime.",
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = "30868700449996813",
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 26, 4, 21, 11, 700, DateTimeKind.Unspecified).AddTicks(8084), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that ends in a tragic or unhappy way.",
                            Name = "Tragedy"
                        });
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.HistoryRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("chapter_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("history_records");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("ComicId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.ToTable("library_entries");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("content")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER")
                        .HasColumnName("read")
                        .HasColumnOrder(3);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("title")
                        .HasColumnOrder(1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Page", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("chapter_id")
                        .HasColumnOrder(4);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("image")
                        .HasColumnOrder(3);

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnName("index")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Server")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("server")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("pages");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicAuthor", b =>
                {
                    b.Property<string>("ComicId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(1);

                    b.Property<string>("AuthorId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("author_id")
                        .HasColumnOrder(2);

                    b.HasKey("ComicId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("comic_author");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicGenre", b =>
                {
                    b.Property<string>("ComicId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(1);

                    b.Property<string>("GenreId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("genre_id")
                        .HasColumnOrder(2);

                    b.HasKey("ComicId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("comic_genre");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.Comment", "ReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId");

                    b.Navigation("Chapter");

                    b.Navigation("Comic");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.HistoryRecord", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryEntry", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Page", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Pages")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicAuthor", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.Comic", null)
                        .WithMany("ComicAuthors")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicGenre", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", null)
                        .WithMany("ComicGenres")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ComicAuthors");

                    b.Navigation("ComicGenres");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
