// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Yomikaze.Infrastructure.Context;

#nullable disable

namespace Yomikaze.Infrastructure.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(YomikazeDbContext))]
    [Migration("20240620165252_AddMissingEntities")]
    partial class AddMissingEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("ComicId")
                        .HasMaxLength(20)
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("Views")
                        .HasColumnType("integer")
                        .HasColumnName("views");

                    b.HasKey("Id")
                        .HasName("pk_chapters");

                    b.HasIndex("ComicId")
                        .HasDatabaseName("ix_chapters_comic_id");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.CoinPricing", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_coin_pricings");

                    b.ToTable("coin_pricings", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string[]>("Aliases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("aliases");

                    b.Property<string[]>("Authors")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("authors");

                    b.Property<string>("Banner")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("banner");

                    b.Property<string>("Cover")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("cover");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("PublicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publication_date");

                    b.Property<decimal?>("PublisherId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("publisher_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_comics");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_comics_publisher_id");

                    b.ToTable("comics", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal?>("ReplyToId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("reply_to_id");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_comment");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_comment_author_id");

                    b.HasIndex("ReplyToId")
                        .HasDatabaseName("ix_comment_reply_to_id");

                    b.ToTable("comment", (string)null);

                    b.HasDiscriminator<string>("type").IsComplete(false).HasValue("comment_base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.HistoryRecord", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_history_records");

                    b.HasIndex("ChapterId")
                        .HasDatabaseName("ix_history_records_chapter_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_history_records_user_id");

                    b.ToTable("history_records", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_library_categories");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_library_categories_user_id_name");

                    b.ToTable("library_categories", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryEntry", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal?>("CategoryId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("category_id")
                        .HasColumnOrder(3);

                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("pk_library_entries");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_library_entries_category_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_library_entries_user_id");

                    b.HasIndex("ComicId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_library_entries_comic_id_user_id");

                    b.ToTable("library_entries", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Notification", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Content")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<bool>("Read")
                        .HasColumnType("boolean")
                        .HasColumnName("read");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Page", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_pages");

                    b.HasIndex("ChapterId")
                        .HasDatabaseName("ix_pages_chapter_id");

                    b.ToTable("pages", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Report", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("CategoryId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DismissalReason")
                        .HasColumnType("text")
                        .HasColumnName("dismissal_reason");

                    b.Property<string[]>("Images")
                        .HasColumnType("text[]")
                        .HasColumnName("images");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal>("ReporterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("reporter_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_report");

                    b.ToTable("report", (string)null);

                    b.HasDiscriminator<string>("type").IsComplete(false).HasValue("report_base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ReportCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresDescription")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_description");

                    b.HasKey("Id")
                        .HasName("pk_report_categories");

                    b.ToTable("report_categories", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Tag", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("CategoryId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_tags_category_id");

                    b.HasIndex("Name", "CategoryId")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name_category_id");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 62223221004435460m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(7905), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that focuses on physical action, such as fighting, war, sports, or physical challenges.",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 62223221004435461m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8390), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Explores exotic locations and tense situations, such as battles, a treasure hunt, or an exploration of the unknown.",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 62223221004435462m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8394), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story with humorous narration or dialogue, intended to amuse the audience.",
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 62223221004435463m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8398), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that is neither a comedy nor a tragedy, typically focusing on a conflict between the protagonist and antagonist.",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 62223221004435464m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8400), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that takes place in a setting that defies the laws of the universe, such as magic or supernatural elements.",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 62223221004435465m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8402), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that evokes fear in both the characters and the audience.",
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 62223221004435466m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8469), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that revolves around solving a puzzle or a crime.",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 62223221004435467m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8472), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that emphasizes the psychology of its characters and their unstable emotional states.",
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 62223221004435468m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8474), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story about love.",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 62223221004435469m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8477), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that portrays a \"cut-out\" sequence of events in a character's life.",
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 62223221004435470m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8479), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that revolves around sports, such as baseball or basketball.",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 62223221004435471m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8481), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that involves supernatural elements, such as ghosts or demons.",
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 62223221004435472m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8484), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that is fast-paced and suspenseful, often involving a crime.",
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 62223221004435473m,
                            CategoryId = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(8486), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that ends in a tragic or unhappy way.",
                            Name = "Tragedy"
                        });
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.TagCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tag_categories");

                    b.ToTable("tag_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 62223221004435458m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(6808), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Genre"
                        },
                        new
                        {
                            Id = 62223221004435459m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 6, 20, 16, 52, 51, 939, DateTimeKind.Unspecified).AddTicks(7281), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Theme"
                        });
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Transaction", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transactions_user_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Translation", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alignment");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal>("PageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("page_id");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.Property<int>("X")
                        .HasColumnType("integer")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("integer")
                        .HasColumnName("y");

                    b.HasKey("Id")
                        .HasName("pk_translations");

                    b.HasIndex("PageId")
                        .HasDatabaseName("ix_translations_page_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_translations_user_id");

                    b.ToTable("translations", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicRating", b =>
                {
                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("ComicId", "UserId")
                        .HasName("pk_comic_ratings");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comic_ratings_user_id");

                    b.ToTable("comic_ratings", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicTag", b =>
                {
                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id");

                    b.Property<decimal>("TagId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("tag_id");

                    b.HasKey("ComicId", "TagId")
                        .HasName("pk_comic_tag");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_comic_tag_tag_id");

                    b.HasIndex("ComicId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("ix_comic_tag_comic_id_tag_id");

                    b.ToTable("comic_tag", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.CommentReaction", b =>
                {
                    b.Property<decimal>("CommentId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comment_id");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<int>("ReactionType")
                        .HasColumnType("integer")
                        .HasColumnName("reaction_type");

                    b.HasKey("CommentId", "UserId")
                        .HasName("pk_comment_reactions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comment_reactions_user_id");

                    b.ToTable("comment_reactions", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.UnlockedChapter", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<decimal>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id");

                    b.HasKey("UserId", "ChapterId")
                        .HasName("pk_unlocked_chapters");

                    b.ToTable("unlocked_chapters", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal>("ProfileId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("profile_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_withdrawal_requests");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_withdrawal_requests_profile_id");

                    b.ToTable("withdrawal_requests", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Identity.Entities.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 62223221000282112m,
                            ConcurrencyStamp = "3b667941-f476-49ce-bfd6-fb8d7398c17a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 62223221004476416m,
                            ConcurrencyStamp = "e6e047a6-5624-45a1-9512-a6b7f8045906",
                            Name = "Publisher",
                            NormalizedName = "PUBLISHER"
                        },
                        new
                        {
                            Id = 62223221004476417m,
                            ConcurrencyStamp = "df4f6dab-874d-427d-a5e9-b9d34368bbb7",
                            Name = "Reader",
                            NormalizedName = "READER"
                        });
                });

            modelBuilder.Entity("Yomikaze.Domain.Identity.Entities.User", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint")
                        .HasColumnName("balance");

                    b.Property<string>("Banner")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("banner");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bio");

                    b.Property<DateTimeOffset?>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ChapterComment", b =>
                {
                    b.HasBaseType("Yomikaze.Domain.Entities.Comment");

                    b.Property<decimal>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id");

                    b.HasIndex("ChapterId")
                        .HasDatabaseName("ix_comment_chapter_id");

                    b.HasDiscriminator().HasValue("chapter_comment");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ComicComment", b =>
                {
                    b.HasBaseType("Yomikaze.Domain.Entities.Comment");

                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id");

                    b.HasIndex("ComicId")
                        .HasDatabaseName("ix_comment_comic_id");

                    b.HasDiscriminator().HasValue("comic_comment");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ProfileComment", b =>
                {
                    b.HasBaseType("Yomikaze.Domain.Entities.Comment");

                    b.Property<decimal>("ProfileId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("profile_id");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_comment_profile_id");

                    b.HasDiscriminator().HasValue("profile_comment");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ChapterReport", b =>
                {
                    b.HasBaseType("Yomikaze.Domain.Entities.Report");

                    b.Property<decimal>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_report_category_id");

                    b.HasIndex("ChapterId")
                        .HasDatabaseName("ix_report_chapter_id");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("ix_report_reporter_id");

                    b.HasDiscriminator().HasValue("chapter_report");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ComicReport", b =>
                {
                    b.HasBaseType("Yomikaze.Domain.Entities.Report");

                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_report_category_id");

                    b.HasIndex("ComicId")
                        .HasDatabaseName("ix_report_comic_id");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("ix_report_reporter_id");

                    b.HasDiscriminator().HasValue("comic_report");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ProfileReport", b =>
                {
                    b.HasBaseType("Yomikaze.Domain.Entities.Report");

                    b.Property<decimal>("ProfileId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("profile_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_report_category_id");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_report_profile_id");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("ix_report_reporter_id");

                    b.HasDiscriminator().HasValue("profile_report");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.TranslationReport", b =>
                {
                    b.HasBaseType("Yomikaze.Domain.Entities.Report");

                    b.Property<decimal>("TranslationId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("translation_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_report_category_id");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("ix_report_reporter_id");

                    b.HasIndex("TranslationId")
                        .HasDatabaseName("ix_report_translation_id");

                    b.HasDiscriminator().HasValue("translation_report");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapters_comics_comic_id");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_comics_users_publisher_id");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_users_author_id");

                    b.HasOne("Yomikaze.Domain.Entities.Comment", "ReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId")
                        .HasConstraintName("fk_comment_comment_reply_to_id");

                    b.Navigation("Author");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.HistoryRecord", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_history_records_chapters_chapter_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_history_records_users_user_id");

                    b.Navigation("Chapter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryCategory", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_categories_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryEntry", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.LibraryCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_library_entries_library_categories_category_id");

                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_entries_comics_comic_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_entries_users_user_id");

                    b.Navigation("Category");

                    b.Navigation("Comic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Page", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Pages")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pages_chapters_chapter_id");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.TagCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_tag_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Translation", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translations_pages_page_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translations_users_user_id");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicRating", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comic_ratings_comics_comic_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comic_ratings_users_user_id");

                    b.Navigation("Comic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicTag", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", null)
                        .WithMany("ComicTags")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comic_tag_comics_comic_id");

                    b.HasOne("Yomikaze.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comic_tag_tags_tag_id");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.CommentReaction", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_reactions_comment_comment_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_reactions_users_user_id");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_withdrawal_requests_users_profile_id");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ChapterComment", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_chapters_chapter_id");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ComicComment", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_comics_comic_id");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ProfileComment", b =>
                {
                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_users_profile_id");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ChapterReport", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.ReportCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_report_categories_category_id");

                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_chapters_chapter_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_users_reporter_id");

                    b.Navigation("Category");

                    b.Navigation("Chapter");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ComicReport", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.ReportCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_report_categories_category_id");

                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_comics_comic_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_users_reporter_id");

                    b.Navigation("Category");

                    b.Navigation("Comic");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.ProfileReport", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.ReportCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_report_categories_category_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_users_profile_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_users_reporter_id");

                    b.Navigation("Category");

                    b.Navigation("Profile");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.TranslationReport", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.ReportCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_report_categories_category_id");

                    b.HasOne("Yomikaze.Domain.Identity.Entities.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_users_reporter_id");

                    b.HasOne("Yomikaze.Domain.Entities.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_translations_translation_id");

                    b.Navigation("Category");

                    b.Navigation("Reporter");

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.Navigation("ComicTags");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
