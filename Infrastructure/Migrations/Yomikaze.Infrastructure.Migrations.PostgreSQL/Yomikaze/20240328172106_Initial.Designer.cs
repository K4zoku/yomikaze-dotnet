// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Yomikaze.Infrastructure.Context;

#nullable disable

namespace Yomikaze.Infrastructure.Migrations.PostgreSQL.Yomikaze
{
    [DbContext(typeof(YomikazeDbContext))]
    [Migration("20240328172106_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Yomikaze.Domain.Entities.Author", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Avatar")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("avatar")
                        .HasColumnOrder(3);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("ComicId")
                        .HasMaxLength(20)
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(4);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.ToTable("chapters");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string[]>("Aliases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("aliases")
                        .HasColumnOrder(2);

                    b.Property<string>("Banner")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("banner")
                        .HasColumnOrder(5);

                    b.Property<string>("Cover")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("cover")
                        .HasColumnOrder(4);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<DateTimeOffset?>("Ended")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended")
                        .HasColumnOrder(7);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("Published")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("PublisherId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("publisher_id")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("comics");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal?>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id")
                        .HasColumnOrder(4);

                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(3);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal?>("ReplyToId")
                        .HasMaxLength(20)
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("reply_to_id")
                        .HasColumnOrder(5);

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<decimal>("UserProfileId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ComicId");

                    b.HasIndex("ReplyToId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Genre", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("genres");

                    b.HasData(
                        new
                        {
                            Id = 31789746191597568m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 116, DateTimeKind.Unspecified).AddTicks(3710), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that focuses on physical action, such as fighting, war, sports, or physical challenges.",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 31789746195791872m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1671), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Explores exotic locations and tense situations, such as battles, a treasure hunt, or an exploration of the unknown.",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 31789746195791873m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1710), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story with humorous narration or dialogue, intended to amuse the audience.",
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 31789746195791874m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1714), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that is neither a comedy nor a tragedy, typically focusing on a conflict between the protagonist and antagonist.",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 31789746195791875m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1717), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that takes place in a setting that defies the laws of the universe, such as magic or supernatural elements.",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 31789746195791876m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1719), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that evokes fear in both the characters and the audience.",
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 31789746195791877m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1722), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that revolves around solving a puzzle or a crime.",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 31789746195791878m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1725), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that emphasizes the psychology of its characters and their unstable emotional states.",
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 31789746195791879m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1727), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story about love.",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 31789746195791880m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1729), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that portrays a \"cut-out\" sequence of events in a character's life.",
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 31789746195791881m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1731), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that revolves around sports, such as baseball or basketball.",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 31789746195791882m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1733), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that involves supernatural elements, such as ghosts or demons.",
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 31789746195791883m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1736), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that is fast-paced and suspenseful, often involving a crime.",
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 31789746195791884m,
                            CreationTime = new DateTimeOffset(new DateTime(2024, 3, 28, 17, 21, 6, 118, DateTimeKind.Unspecified).AddTicks(1738), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A story that ends in a tragic or unhappy way.",
                            Name = "Tragedy"
                        });
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.HistoryRecord", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<long>("Views")
                        .HasColumnType("bigint")
                        .HasColumnName("views")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ChapterId", "UserId")
                        .IsUnique();

                    b.ToTable("history_records");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryEntry", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ComicId", "UserId")
                        .IsUnique();

                    b.ToTable("library_entries");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Notification", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("content")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<bool>("Read")
                        .HasColumnType("boolean")
                        .HasColumnName("read")
                        .HasColumnOrder(3);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title")
                        .HasColumnOrder(1);

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Page", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("ChapterId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("chapter_id")
                        .HasColumnOrder(4);

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("image")
                        .HasColumnOrder(3);

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Server")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("server")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("pages");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.UserProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Banner")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time")
                        .HasColumnOrder(98);

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicAuthor", b =>
                {
                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id")
                        .HasColumnOrder(2);

                    b.HasKey("ComicId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("comic_author");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicGenre", b =>
                {
                    b.Property<decimal>("ComicId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("comic_id")
                        .HasColumnOrder(1);

                    b.Property<decimal>("GenreId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("genre_id")
                        .HasColumnOrder(2);

                    b.HasKey("ComicId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("comic_genre");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.UserProfile", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.Comment", "ReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId");

                    b.HasOne("Yomikaze.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Comic");

                    b.Navigation("ReplyTo");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.HistoryRecord", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.LibraryEntry", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Page", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Pages")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicAuthor", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.Comic", null)
                        .WithMany("ComicAuthors")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Weak.ComicGenre", b =>
                {
                    b.HasOne("Yomikaze.Domain.Entities.Comic", null)
                        .WithMany("ComicGenres")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yomikaze.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comic", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ComicAuthors");

                    b.Navigation("ComicGenres");
                });

            modelBuilder.Entity("Yomikaze.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
